# !/usr/bin/env python3
# -*- coding:utf-8 -*-
# @Time    : 2024/4/15 11:02
# @Author  : wangchongshi
# @Email   : wangchongshi.wcs@antgroup.com
# @FileName: test_executing_agent.py
import unittest

from agentuniverse.agent.agent import Agent
from agentuniverse.agent.agent_manager import AgentManager
from agentuniverse.agent.input_object import InputObject
from agentuniverse.agent.output_object import OutputObject
from agentuniverse.base.agentuniverse import AgentUniverse


class ExecutingAgentTest(unittest.TestCase):
    """Test cases for the executing agent"""

    def setUp(self) -> None:
        AgentUniverse().start(config_path='../../config/config.toml')

    def test_executing_agent(self):
        """Test demo executing agent.

        In the normal process, we need to generate the framework through the planning agent.
        After that, the information is collected through the executing agent.
        In the current demo test method, we mock the framework result generated by the planning Agent.

        Note:
            This agent uses `google_search_tool`, which is a simple Google search.
            You need to sign up for a free account at https://serper.dev
            and get the serpher api key (2500 free queries).
        """

        instance: Agent = AgentManager().get_instance_obj('demo_executing_agent')

        # mock the planning agent result, which is a framework of mind solving the final problem.
        framework = ["巴菲特减持比亚迪的具体情况是什么？包括减持的时间和数量。",
                     "巴菲特减持比亚迪前后的市场环境是怎么样的？",
                     "巴菲特的投资策略是什么？是否可能影响其决定减持比亚迪？",
                     "比亚迪在巴菲特减持前后的业绩表现如何？",
                     "巴菲特减持比亚迪对比亚迪的影响有哪些？比如可能的股价变动、投资者信心等。"]
        planning_result = InputObject({'framework': framework})

        output_object: OutputObject = instance.run(input='分析下巴菲特减持比亚迪的原因',
                                                   planning_result=planning_result)
        executing_result = output_object.get_data('executing_result')
        res_info = f"\nExecuting agent execution result is :\n"
        for index, one_exec_res in enumerate(executing_result):
            res_info += f"[{index + 1}] input: {one_exec_res.get('input')}\n"
            res_info += f"[{index + 1}] output: {one_exec_res.get('output')}\n"
        print(res_info)


if __name__ == '__main__':
    unittest.main()
